mutate_and_speciate() without further optimization, no set and early stopping for dist()

Total time: 62.8918 s
File: /Users/so/Documents/projects/personal/2048_AI/sim/Simulation.py
Function: mutate_and_speciate at line 93

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    93                                               @profile
    94                                               def mutate_and_speciate(self):
    95                                                   # reset self.species
    96      2331        335.0      0.1      0.0          for species_num in self.species:
    97      2281      52518.0     23.0      0.1              self.species[species_num]['children'] = []
    98                                                   
    99                                                   # mutate genomes
   100     50050       5341.0      0.1      0.0          for genome in self.genomes:
   101     50000      10754.0      0.2      0.0              if genome.mutable:
   102     48173     585633.0     12.2      0.9                  genome.mutate()
   103                                                       else:
   104                                                           # set mutable to True for this generations, so it can be mutated in future generations
   105      1827        229.0      0.1      0.0                  genome.mutable = True
   106                                           
   107                                                       # then put in appropriate species
   108     50000       4486.0      0.1      0.0              new_species = True
   109   1189142     107124.0      0.1      0.2              for species_num in self.species:
   110                                                           # print(f'checking {species_num}')
   111   1188650   33483202.0     28.2     53.2                  dist = nn.NetworkGenome.distance(self.species[species_num]['progenitor'], genome, self.w_disjoint, self.w_excess, self.w_weight, self.speciation_threshold)
   112                                                           # print(dist)
   113   1188650     123285.0      0.1      0.2                  if dist < self.speciation_threshold: # if genome is the same species as species_num
   114     49508       3800.0      0.1      0.0                      new_species = False
   115     49508       7829.0      0.2      0.0                      self.species[species_num]['children'].append(genome)
   116     49508       6283.0      0.1      0.0                      genome.species = species_num
   117     49508       4586.0      0.1      0.0                      break
   118     50000       6096.0      0.1      0.0              if new_species:
   119                                                           # print('new species')
   120       492   28488637.0  57903.7     45.3                  self.species[self.species_counter] = {'progenitor': deepcopy(genome), 'children': [genome]}
   121       492        279.0      0.6      0.0                  genome.species = species_num
   122       492        187.0      0.4      0.0                  self.species_counter += 1
   123                                           
   124                                                   # remove species_nums that have no more children (extinct species)
   125        50        124.0      2.5      0.0          current_species = list(self.species.keys())
   126      2823        318.0      0.1      0.0          for species_num in current_species:
   127      2773        783.0      0.3      0.0              if not self.species[species_num]['children']:
   128                                                           del self.species[species_num]
   129                                                           del self.species_size[species_num]
